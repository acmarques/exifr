var search_data = {"index":{"searchIndex":["exifr","jpeg","reader","malformedimage","malformedjpeg","malformedtiff","tiff","degrees","orientation","[]()","each()","encode_with()","exif?()","gps()","height()","inspect()","method_missing()","method_missing()","new()","new()","new()","next()","rational()","readbyte()","readframe()","readint()","readsof()","round()","size()","thumbnail()","to_f()","to_hash()","to_hash()","to_i()","to_sym()","to_yaml_properties()","transform_rmagick()","width()","readme"],"longSearchIndex":["exifr","exifr::jpeg","exifr::jpeg::reader","exifr::malformedimage","exifr::malformedjpeg","exifr::malformedtiff","exifr::tiff","exifr::tiff::degrees","exifr::tiff::orientation","exifr::tiff#[]()","exifr::tiff#each()","exifr::tiff#encode_with()","exifr::jpeg#exif?()","exifr::tiff#gps()","exifr::tiff#height()","exifr::tiff::orientation#inspect()","exifr::jpeg#method_missing()","exifr::tiff#method_missing()","exifr::jpeg::new()","exifr::tiff::new()","exifr::tiff::degrees::new()","exifr::jpeg::reader#next()","exifr::tiff::rational()","exifr::jpeg::reader#readbyte()","exifr::jpeg::reader#readframe()","exifr::jpeg::reader#readint()","exifr::jpeg::reader#readsof()","exifr::tiff::round()","exifr::tiff#size()","exifr::jpeg#thumbnail()","exifr::tiff::degrees#to_f()","exifr::jpeg#to_hash()","exifr::tiff#to_hash()","exifr::tiff::orientation#to_i()","exifr::tiff::orientation#to_sym()","exifr::tiff#to_yaml_properties()","exifr::tiff::orientation#transform_rmagick()","exifr::tiff#width()",""],"info":[["EXIFR","","EXIFR.html","",""],["EXIFR::JPEG","","EXIFR/JPEG.html","","<p>JPEG decoder\n<p>Examples\n\n<pre>EXIFR::JPEG.new(&#39;IMG_3422.JPG&#39;).width         # -&gt; 2272\nEXIFR::JPEG.new(&#39;IMG_3422.JPG&#39;).exif.model ...</pre>\n"],["EXIFR::JPEG::Reader","","EXIFR/JPEG/Reader.html","",""],["EXIFR::MalformedImage","","EXIFR/MalformedImage.html","",""],["EXIFR::MalformedJPEG","","EXIFR/MalformedJPEG.html","",""],["EXIFR::MalformedTIFF","","EXIFR/MalformedTIFF.html","",""],["EXIFR::TIFF","","EXIFR/TIFF.html","","<p>TIFF decoder\n<p>Date properties\n<p>The properties <code>:date_time</code>, <code>:date_time_original</code>,\n<code>:date_time_digitized</code> coerced …\n"],["EXIFR::TIFF::Degrees","","EXIFR/TIFF/Degrees.html","",""],["EXIFR::TIFF::Orientation","","EXIFR/TIFF/Orientation.html","","<p>The orientation of the image with respect to the rows and columns.\n"],["[]","EXIFR::TIFF","EXIFR/TIFF.html#method-i-5B-5D","(index)","<p>Get <code>index</code> image.\n"],["each","EXIFR::TIFF","EXIFR/TIFF.html#method-i-each","()","<p>Yield for each image.\n"],["encode_with","EXIFR::TIFF","EXIFR/TIFF.html#method-i-encode_with","(coder)",""],["exif?","EXIFR::JPEG","EXIFR/JPEG.html#method-i-exif-3F","()","<p>Returns <code>true</code> when EXIF data is available.\n"],["gps","EXIFR::TIFF","EXIFR/TIFF.html#method-i-gps","()","<p>Get GPS location, altitude and image direction return nil when not\navailable.\n"],["height","EXIFR::TIFF","EXIFR/TIFF.html#method-i-height","()","<p>Convenience method to access image height.\n"],["inspect","EXIFR::TIFF::Orientation","EXIFR/TIFF/Orientation.html#method-i-inspect","()","<p>Debugging output.\n"],["method_missing","EXIFR::JPEG","EXIFR/JPEG.html#method-i-method_missing","(method, *args)","<p>Dispatch to EXIF.  When no EXIF data is available but the\n<code>method</code> does exist for EXIF data <code>nil</code> will be …\n"],["method_missing","EXIFR::TIFF","EXIFR/TIFF.html#method-i-method_missing","(method, *args)","<p>Dispatch to first image.\n"],["new","EXIFR::JPEG","EXIFR/JPEG.html#method-c-new","(file)","<p><code>file</code> is a filename or an IO object.  Hint: use StringIO when\nworking with slurped data like blobs.\n"],["new","EXIFR::TIFF","EXIFR/TIFF.html#method-c-new","(file)","<p><code>file</code> is a filename or an <code>IO</code> object.  Hint: use\n<code>StringIO</code> when working with slurped data like blobs.\n"],["new","EXIFR::TIFF::Degrees","EXIFR/TIFF/Degrees.html#method-c-new","(arr)",""],["next","EXIFR::JPEG::Reader","EXIFR/JPEG/Reader.html#method-i-next","()",""],["rational","EXIFR::TIFF","EXIFR/TIFF.html#method-c-rational","(n, d)",""],["readbyte","EXIFR::JPEG::Reader","EXIFR/JPEG/Reader.html#method-i-readbyte","()",""],["readframe","EXIFR::JPEG::Reader","EXIFR/JPEG/Reader.html#method-i-readframe","()",""],["readint","EXIFR::JPEG::Reader","EXIFR/JPEG/Reader.html#method-i-readint","()",""],["readsof","EXIFR::JPEG::Reader","EXIFR/JPEG/Reader.html#method-i-readsof","()",""],["round","EXIFR::TIFF","EXIFR/TIFF.html#method-c-round","(f, n)",""],["size","EXIFR::TIFF","EXIFR/TIFF.html#method-i-size","()","<p>Number of images.\n"],["thumbnail","EXIFR::JPEG","EXIFR/JPEG.html#method-i-thumbnail","()","<p>Return thumbnail data when available.\n"],["to_f","EXIFR::TIFF::Degrees","EXIFR/TIFF/Degrees.html#method-i-to_f","()",""],["to_hash","EXIFR::JPEG","EXIFR/JPEG.html#method-i-to_hash","()","<p>Get a hash presentation of the image.\n"],["to_hash","EXIFR::TIFF","EXIFR/TIFF.html#method-i-to_hash","()","<p>Get a hash presentation of the (first) image.\n"],["to_i","EXIFR::TIFF::Orientation","EXIFR/TIFF/Orientation.html#method-i-to_i","()","<p>Field value.\n"],["to_sym","EXIFR::TIFF::Orientation","EXIFR/TIFF/Orientation.html#method-i-to_sym","()","<p>Symbolic value.\n"],["to_yaml_properties","EXIFR::TIFF","EXIFR/TIFF.html#method-i-to_yaml_properties","()",""],["transform_rmagick","EXIFR::TIFF::Orientation","EXIFR/TIFF/Orientation.html#method-i-transform_rmagick","(img)","<p>Rotate and/or flip for proper viewing.\n"],["width","EXIFR::TIFF","EXIFR/TIFF.html#method-i-width","()","<p>Convenience method to access image width.\n"],["README","","README_rdoc.html","","<p>EXIF Reader\n<p><img src=\"https://badge.fury.io/rb/exifr.svg\" alt=\"Gem Version\" /> <img\nsrc=“https://circleci.com/gh/remvee/exifr/tree/master.svg?style=shield&circle-token=7d957be2d7195f5d07a7c1962926ee626b050c2e”\n…\n"]]}}